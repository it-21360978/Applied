package com.example.job_portal.database

import android.content.Context
import com.example.job_portal.model.UserFeedback
import com.google.android.gms.tasks.Task
import com.google.firebase.database.*

class FeedbackDatabaseHelper(context: Context) {

    private val database = FirebaseDatabase.getInstance("https://project-4f40b-default-rtdb.firebaseio.com").reference.child("feedback")

    fun addFeedback(feedback: UserFeedback): Task<Void> {
        val feedbackRef = database.push()
        feedback.id = feedbackRef.key.toString() // Set the unique key generated by Firebase as the feedback's ID
        return feedbackRef.setValue(feedback)
    }

    fun getFeedback(id: String, callback: (UserFeedback?) -> Unit) {
        val feedbackRef = database.child(id)
        feedbackRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                val feedback = dataSnapshot.getValue(UserFeedback::class.java)
                callback(feedback)
            }

            override fun onCancelled(error: DatabaseError) {
                callback(null)
            }
        })
    }

    fun getAllFeedback(callback: (List<UserFeedback>) -> Unit) {
        val feedbackList = mutableListOf<UserFeedback>()
        val feedbackRef = database.orderByKey()
        feedbackRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                dataSnapshot.children.forEach { snapshot ->
                    val feedback = snapshot.getValue(UserFeedback::class.java)
                    feedback?.let { feedbackList.add(it) }
                }
                callback(feedbackList)
            }

            override fun onCancelled(error: DatabaseError) {
                callback(emptyList())
            }
        })
    }

    fun updateFeedback(feedback: UserFeedback): Task<Void> {
        val feedbackRef = database.child(feedback.id)
        return feedbackRef.setValue(feedback)
    }

    fun deleteFeedback(feedback: UserFeedback): Task<Void> {
        val feedbackRef = database.child(feedback.id)
        return feedbackRef.removeValue()
    }
}
